// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Domain;
//
//    var city = City.FromJson(jsonString);

namespace Domain
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class City
    {
        [JsonProperty("districts", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<District>> Districts { get; set; }
    }

    public enum District { Sm1, Sm2 };

    public partial class City
    {
        public static City FromJson(string json) => JsonConvert.DeserializeObject<City>(json, Domain.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this City self) => JsonConvert.SerializeObject(self, Domain.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DistrictConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DistrictConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(District) || t == typeof(District?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "sm-1":
                    return District.Sm1;
                case "sm-2":
                    return District.Sm2;
            }
            throw new Exception("Cannot unmarshal type District");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (District)untypedValue;
            switch (value)
            {
                case District.Sm1:
                    serializer.Serialize(writer, "sm-1");
                    return;
                case District.Sm2:
                    serializer.Serialize(writer, "sm-2");
                    return;
            }
            throw new Exception("Cannot marshal type District");
        }

        public static readonly DistrictConverter Singleton = new DistrictConverter();
    }
}